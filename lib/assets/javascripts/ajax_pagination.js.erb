//= require jquery.ba-bbq
//= require jquery.url

/* 
 * AJAX Pagination: Ajaxifying your pagination links
 * https://github.com/ronalchn/ajax_pagination
 * 
 * Copyright (c) 2012 Ronald Ping Man Chan
 * Distributed under the LGPL license
 */
jQuery(document).ready(function () {
  function minVersion(version) {
    var $vrs = window.jQuery.fn.jquery.split('.'),
        min  = version.split('.');
    for (var i=0, len=min.length; i<len; i++) {
      if ($vrs[i]) {
        min[i] = parseInt(min[i],10);
        $vrs[i] = parseInt($vrs[i],10);
        if ($vrs[i] < min[i]) return false;
        else if ($vrs[i] > min[i]) return true;
      }
      else return false;
    }
    return true;
  }
  <% minjQuery = '1.7' %>
  <% if AjaxPagination.warnings %>
    if (!(History && minVersion('<%= minjQuery %>'))) { // dependencies missing
      var missing = "";
      if (!History) missing += "\nHistory.js not installed";
      if (!minVersion('<%= minjQuery %>')) missing += "\njQuery version <%= minjQuery %>+ not installed. Currently installed: jQuery " + window.jQuery.fn.jquery;
      alert("AJAX Pagination warning:" + missing);
    }
  <% end %>
  if (History && History.enabled && minVersion('<%= minjQuery %>')) {
    (function( $ ) {
      var pagination_loader_state = new Array(); // the page we are waiting for
      var pagination_url = location.href; // url we came from, so we can see transitions of the url

      function display_pagination_loader(pagination_name) {
        if (pagination_loader_state[pagination_name] != undefined) return; // if already loading, don't reshow loader
        var paginated_section = $('#' + pagination_name + '_paginated_section');
        var paginated_content;
        if (paginated_section.hasClass("paginated_content")) paginated_content = paginated_section; // if the whole section is a loading zone
        else paginated_content = paginated_section.children(".paginated_content").first(); // don't want to support multiple loader images
        var height = paginated_content.height();
        // setup loading look
        var img = document.createElement("IMG");
        if (paginated_section.data("pagination") !== undefined && paginated_section.data("pagination").image !== undefined) img.src = paginated_section.data("pagination").image;
        else img.src = "<%= asset_path AjaxPagination.loading_image %>";
        var margin = Math.round(height>400?100:(height/4));
        $(img).css({'margin': margin + 'px', 'max-height': (3*height/4) + 'px'}).addClass('ajaxloader');
        var div = document.createElement("DIV");
        $(div).append(img);
        $(div).css({'position': 'absolute', 'left': 0, 'top': 0, 'width': '100%', 'height': '100%', 'text-align': 'center', 'opacity': 0.9});
        paginated_content.children().css({'opacity': 0.4});
        paginated_content.append(div);

        // scroll to top of paginated_section if it is not visible
        if ($('body').scrollTop() > paginated_section.offset().top) {
          $('body').scrollTop(paginated_section.offset().top);
        }
      }
      function swapPage(pagination_name,requesturl) { // swaps the page at pagination_name to that from requesturl
        display_pagination_loader(pagination_name);
        pagination_loader_state[pagination_name] = requesturl; // remember which page number we are waiting for
        var id = "#" + pagination_name + "_paginated_section"; // element id we are looking for
        $.ajax({url: requesturl, data: {pagination:pagination_name},
          dataType: 'html',
          success: function(data, textStatus, jqXHR) {
            if (requesturl != pagination_url) return; // ignore stale content
            if (jqXHR.status == 200 && jqXHR.getResponseHeader('Location') !== null) { // special AJAX redirect
              var redirecturl = jqXHR.getResponseHeader('Location');
              swapPage(pagination_name,redirecturl);
              pagination_url = redirecturl;
              History.replaceState(null,document.title,redirecturl);
              return;
            }
            // find matching element id in data, after removing script tags
            var page = $("<div>").append(data.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,""));
            var content = page.find(id);
            if (content.length>0) {
              $(id).html(content.html());
              <% if AjaxPagination.warnings %>
                alert("AJAX Pagination warning:\nExtra content returned by AJAX request ignored. Only a portion of the page content returned by the server was required. To fix this, explicitly call ajax_pagination for :pagination => \"" + pagination_name + "\" to render only the partial view required. This warning can be turned off in the ajax_pagination initializer file.");
              <% end %>
            }
            else { // otherwise use all the content, including any scripts - we consider scripts specifically returned in the partial probably should be re-run
              page = $("<div>").append(data);
              content = page.find("body");
              if (content.length>0) $(id).html(content.html()); // if it has a body tag, only include its contents (for full html structure), leaving out <head> etc sections.
              else $(id).html(page.html()); // otherwise include the whole html snippet
            }
            // if page contains a title, use it
            content = page.find("title");
            if (content.length>0) History.replaceState(null,content.html(),location.href);
            delete pagination_loader_state[pagination_name]; // not waiting for page anymore
          },
          error: function(jqXHR, textStatus, errorThrown) {
            if (requesturl != pagination_url) return; // ignore stale content
            $(id).html(jqXHR.responseText);
          }
        });
      }
      $('body').on("click", ".pagination a, .ajaxpagination a, a.ajaxpagination", function() {
        // TODO: exit if this is an external link, browser same origin policy forbids loading within page anyways
        var pagination_container = $(this).closest(".pagination, .ajaxpagination"); // container of links (use to check for data-pagination first)
        var pagination_name = pagination_container.data('pagination');
        if (pagination_name === undefined) {
          pagination_name = /^(.*)_paginated_section$/.exec($(this).closest(".paginated_section").attr("id")); // if data-pagination not present, search up the tree for a suitable section
          if (pagination_name == null) {
            <% if AjaxPagination.warnings %>
              alert("AJAX Pagination warning:\nNo pagination section name given for link, and none could be implicitly assigned, AJAX cancelled for this request");
            <% end %>
            return true; // pagination not set up properly
          }
          pagination_name = pagination_name[1];
        }
        if ($("#" + pagination_name + "_paginated_section").length != 1) { // something wrong, cannot find unique section to load page into
          <% if AjaxPagination.warnings %>
            alert("AJAX Pagination warning:\nExpected one pagination section called " + pagination_name + ", found " + $("#" + pagination_name + "_paginated_section").length);
          <% end %>
          return true; // follow link normally
        }
        //var requesturl = $.param.querystring(this.href,{pagination:pagination_name}); // by default, adds ?pagination=page
        swapPage(pagination_name,this.href);
        pagination_url = this.href;
        History.pushState(null,document.title,this.href);
        return false;
      });

      History.Adapter.bind(window,'popstate',function(){ // popstate, but can work with hash changes as well
        var from = pagination_url, to = location.href; // from what state to what other state

        $(".paginated_section").each(function(){
          var pagination_name = /^(.*)_paginated_section$/.exec($(this).attr("id"))[1];
          if (pagination_name == null) return; // pagination not set up properly

          // if data-pagination is not defined, the use default reload test
          if ($(this).data('pagination') === undefined || $(this).data('pagination').reload === undefined) {
            // if ?pagination_name=ABC, where ABC is the same for both urls, then don't need to reload
            if ($.deparam.querystring(from)[pagination_name] === $.deparam.querystring(to)[pagination_name]) return;
          }
          else { // otherwise parse json and perform tests
            var reload = $(this).data('pagination').reload;
            if (!(reload instanceof Array)) reload = new Array(reload);
            var changed = false;
            for (i=0;i<reload.length;i++) {
              if (reload[i].query !== undefined) {
                if ($.deparam.querystring(from)[reload[i].query] !== $.deparam.querystring(to)[reload[i].query]) changed = true;
              }
              if (reload[i].urlregex !== undefined) {
                var fstr = from, tstr = to;
                if (reload[i].urlpart !== undefined) {
                  fstr = $.url(from,true).attr(reload[i].urlpart);
                  tstr = $.url(to,true).attr(reload[i].urlpart);
                  if (typeof(fstr)!="string" || typeof(tstr)!="string") continue; // skip
                }
                var index = 0;
                if (reload[i].regexindex !== undefined) index = reload[i].regexindex;
                var regex = new RegExp(reload[i].urlregex);
                var frommatch = regex.exec(fstr), tomatch = regex.exec(tstr);
                if (frommatch != null && frommatch.length>=index) frommatch = frommatch[index];
                if (tomatch != null && tomatch.length>=index) tomatch = tomatch[index];
                if (frommatch !== tomatch) changed = true;
              }
              if (changed) break;
            }
            if (!changed) return; // otherwise it has changed, and we must reload
          }
          swapPage(pagination_name,location.href);
        });

        pagination_url = location.href; // update url (new url recognised)
      });

      History.Adapter.trigger(window,"popstate"); // update stuff on page load
    })( jQuery );
  }
});

